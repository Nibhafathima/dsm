

import pandas as pd

details = [[1,2],[3,4]]
  
df = pd.DataFrame(details)
  
print(df)



import pandas as pd

df = pd.read_csv('5_Pandas.csv')

print(df.to_string())


import pandas as pd

df = pd.DataFrame({'Name': ['e','a','a','b','c','d'],
                   'Age': [1,2,1,3,3,4],
                   'Rank': [0,1,2,3,4,5]})

print(df.to_string())

print('SORTED DATAFRAME')
df = df.sort_values(by=['Name','Age'], ascending=[True,True])

print(df.to_string())



import pandas as pd

data = {'Name': ['e','a','a','b','c','d'],
                   'Age': [1,2,1,3,3,4],
                   'Rank': [0,1,2,3,4,5]}

index = {'a1', 'b1', 'c1', 'd1', 'e1','f1'}

df = pd.DataFrame(data,index)
#df.reset_index(inplace = True)
print(df.to_string())
df.reset_index(inplace = True, drop = True)
print(df.to_string())

import pandas as pd

details = {
    'Name' : ['a','b','c','d'],
    'Age' : [24,25,26,27],
}
  

df = pd.DataFrame(details)
  
print(df[:2])

import pandas as pd

details = {
    'Name' : ['a','b','c','d','e'],
    'Occupation' : ['A1','A1','A1','B1','B1'],
    'Salary' : [20,30,40,27,23],
}
  

df = pd.DataFrame(details)
print(df)
occ_average_age = df.groupby('Occupation')['Salary'].mean()
print("Average salary per occupation : ")
print(occ_average_age)


import pandas as pd
import numpy as np

nums = {'Set_of_Numbers': [2, 3, 5, 7, 11, 13,np.nan, 19, 23, np.nan]}
df = pd.DataFrame(nums, columns =['Set_of_Numbers'])
df['Set_of_Numbers'] = df['Set_of_Numbers'].fillna(0)
print(df)


import numpy as np 
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split 
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
data = load_iris()
X = data.data
y= data.target
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)
k=3 
knn = KNeighborsClassifier(n_neighbors=k)
knn.fit(X_train,y_train)
y_pred = knn.predict(X_test)
accuracy = accuracy_score(y_test,y_pred)
print(f'Accuracy of k-NN with k={k}: {accuracy:2f}')





import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Generate a synthetic dataset
# Let's create a dataset with 2 features and 3 classes (similar to the Iris dataset)

# Number of samples per class
n_samples = 50

# Class 0: centered at (0, 0)
class_0 = np.random.randn(n_samples, 2) + np.array([0, 0])

# Class 1: centered at (3, 3)
class_1 = np.random.randn(n_samples, 2) + np.array([3, 3])

# Class 2: centered at (0, 5)
class_2 = np.random.randn(n_samples, 2) + np.array([0, 5])

# Combine the classes to create the dataset
X = np.vstack((class_0, class_1, class_2))
y = np.array([0]*n_samples + [1]*n_samples + [2]*n_samples)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the k-NN algorithm classifier with a specified value of k
k = 5  # You can change this value as needed
knn = KNeighborsClassifier(n_neighbors=k)

# Fit the model on the training data
knn.fit(X_train, y_train)

# Make the predictions on the test data
y_pred = knn.predict(X_test)

# Calculate the accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy of k-NN with k={k}: {accuracy*100:.2f}%')
